name: Deploy Docker Application

on:
  push:
    branches:
      - production
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'email/**'
  workflow_dispatch:

jobs:
  # Job: Setup EC2 Instance
  setup-ec2:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Install AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check or Create EC2 Instance
        id: ec2-setup
        run: |
            vpc_id=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=it-asset-management-vpc" --query "Vpcs[0].VpcId" --output text)
            if [ "$vpc_id" = "None" ]; then
              echo "No VPC found. Creating a new one..."
              vpc_id=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 --query "Vpc.VpcId" --output text)
              aws ec2 create-tags --resources $vpc_id --tags Key=Name,Value=it-asset-management-vpc
              echo "Created VPC with ID: $vpc_id"
              aws ec2 modify-vpc-attribute --vpc-id $vpc_id --enable-dns-support "{\"Value\":true}"
              aws ec2 modify-vpc-attribute --vpc-id $vpc_id --enable-dns-hostnames "{\"Value\":true}"
            else
              echo "Found existing VPC with ID: $vpc_id"
            fi

            subnet_id=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=it-asset-management-subnet" --query "Subnets[0].SubnetId" --output text)
            if [ "$subnet_id" = "None" ]; then
              echo "No Subnet found. Creating a new one..."
              subnet_id=$(aws ec2 create-subnet --vpc-id $vpc_id --cidr-block 10.0.1.0/24 --query "Subnet.SubnetId" --output text)
              aws ec2 create-tags --resources $subnet_id --tags Key=Name,Value=it-asset-management-subnet
              echo "Created Subnet with ID: $subnet_id"
            else
              echo "Found existing Subnet with ID: $subnet_id"
            fi

            sg_id=$(aws ec2 create-security-group --group-name it-asset-management-sg --description "Security group for IT Asset Management" --vpc-id $vpc_id --query "GroupId" --output text)
            echo "Created Security Group with ID: $sg_id"

            aws ec2 authorize-security-group-ingress --group-id $sg_id --protocol tcp --port 80 --cidr 0.0.0.0/0
            echo "Allowed inbound traffic on port 80"

            instance_id=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=it-asset-management-prod" "Name=instance-state-name,Values=running,stopped" \
            --query "Reservations[].Instances[0].InstanceId" --output text)

            if [ "$instance_id" = "None" ]; then
            echo "No EC2 instance found. Creating a new one..."
            instance_id=$(aws ec2 run-instances \
              --image-id ami-0e35ddab05955cf57 \ 
              --count 1 \
              --instance-type t2.micro \ 
              --key-name it-asset-management-prod \ # Replace with your key pair name
              --security-group-ids $sg_id \
              --subnet-id $subnet_id \
              --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=it-asset-management-prod}]' \
              --query "Instances[0].InstanceId" --output text)
            echo "Created EC2 instance with ID: $instance_id"
            else
            echo "Found EC2 instance with ID: $instance_id"
            state=$(aws ec2 describe-instances --instance-ids $instance_id --query "Reservations[].Instances[0].State.Name" --output text)
            if [ "$state" = "stopped" ]; then
              echo "Instance is stopped. Starting it..."
              aws ec2 start-instances --instance-ids $instance_id
              aws ec2 wait instance-running --instance-ids $instance_id
              echo "Instance started."
            else
              echo "Instance is already running."
            fi
            fi

            public_ip=$(aws ec2 describe-instances --instance-ids $instance_id --query "Reservations[].Instances[0].PublicIpAddress" --output text)
            echo "Public IP: $public_ip"
            echo "::set-output name=public_ip::$public_ip"

  # Job: Deploy Frontend
  frontend:
    runs-on: ubuntu-latest
    environment: production
    needs: 
      - setup-ec2
      - backend
    if: ${{ github.event_name == 'push' && contains(join(github.event.paths, ','), 'frontend/') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        run: docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"

      - name: Rename existing Docker image
        run: |
          current_date=$(date +%Y%m%d)
          docker pull ${{ secrets.DOCKER_USERNAME }}/it-asset-management-frontend:latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/it-asset-management-frontend:latest ${{ secrets.DOCKER_USERNAME }}/it-asset-management-frontend:$current_date
          docker push ${{ secrets.DOCKER_USERNAME }}/it-asset-management-frontend:$current_date

      - name: Build and push new Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/it-asset-management-frontend:latest -f ./Docker/dockerfile.frontend ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/it-asset-management-frontend:latest

      - name: Deploy Frontend to EC2
        run: |
          public_ip=${{ needs.setup-ec2.outputs.public_ip }}
          echo "${{ secrets.ENV_FILE }}" > .env
          echo "${{ secrets.KEY_PAIR_SECRET }}" > private_key.pem
          chmod 600 private_key.pem
          scp -i private_key.pem -o StrictHostKeyChecking=no .env ubuntu@$public_ip:/home/ubuntu/docker-setup/.env
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$public_ip << EOF
            docker network create --driver=bridge app-network || echo "Network 'app-network' already exists."
            if [ \$(docker ps -a -q -f name=it-asset-management-frontend) ]; then
              docker stop it-asset-management-frontend
              docker rm it-asset-management-frontend
            fi
            docker run -d --name it-asset-management-frontend --env-file ~/docker-setup/.env --network app-network ${{ secrets.DOCKER_USERNAME }}/it-asset-management-frontend:latest
          EOF
          rm private_key.pem

  backend:
    runs-on: ubuntu-latest
    environment: production
    needs: 
      - setup-ec2
      - redis
    if: ${{ github.event_name == 'push' && contains(join(github.event.paths, ','), 'backend/') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        run: docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"

      - name: Rename existing Docker image
        run: |
          current_date=$(date +%Y%m%d)
          docker pull ${{ secrets.DOCKER_USERNAME }}/it-asset-management-backend:latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/it-asset-management-backend:latest ${{ secrets.DOCKER_USERNAME }}/it-asset-management-backend:$current_date
          docker push ${{ secrets.DOCKER_USERNAME }}/it-asset-management-backend:$current_date

      - name: Build and push new Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/it-asset-management-backend:latest -f ./Docker/dockerfile.backend ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/it-asset-management-backend:latest

      - name: Deploy Backend to EC2
        run: |
          public_ip=${{ needs.setup-ec2.outputs.public_ip }}
          echo "${{ secrets.ENV_FILE }}" > .env
          echo "${{ secrets.KEY_PAIR_SECRET }}" > private_key.pem
          chmod 600 private_key.pem
          scp -i private_key.pem -o StrictHostKeyChecking=no .env ubuntu@$public_ip:/home/ubuntu/docker-setup/.env
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$public_ip << EOF
            docker network create --driver=bridge app-network || echo "Network 'app-network' already exists."
            if [ \$(docker ps -a -q -f name=it-asset-management-backend) ]; then
              docker stop it-asset-management-backend
              docker rm it-asset-management-backend
            fi
            docker run -d --name it-asset-management-backend --env-file ~/docker-setup/.env --network app-network ${{ secrets.DOCKER_USERNAME }}/it-asset-management-backend:latest
          EOF
          rm private_key.pem

  email:
    runs-on: ubuntu-latest
    environment: production
    needs: setup-ec2
    if: ${{ github.event_name == 'push' && contains(join(github.event.paths, ','), 'email-server/') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        run: docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"

      - name: Rename existing Docker image
        run: |
          current_date=$(date +%Y%m%d)
          docker pull ${{ secrets.DOCKER_USERNAME }}/it-asset-management-email_server:latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/it-asset-management-email_server:latest ${{ secrets.DOCKER_USERNAME }}/it-asset-management-email_server:$current_date
          docker push ${{ secrets.DOCKER_USERNAME }}/it-asset-management-email_server:$current_date

      - name: Build and push new Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/it-asset-management-email_server:latest -f ./Docker/dockerfile.email_server ./email-server
          docker push ${{ secrets.DOCKER_USERNAME }}/it-asset-management-email_server:latest

      - name: Deploy Email Server to EC2
        run: |
          public_ip=${{ needs.setup-ec2.outputs.public_ip }}
          echo "${{ secrets.ENV_FILE }}" > .env
          echo "${{ secrets.KEY_PAIR_SECRET }}" > private_key.pem
          chmod 600 private_key.pem
          scp -i private_key.pem -o StrictHostKeyChecking=no .env ubuntu@$public_ip:/home/ubuntu/docker-setup/.env
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$public_ip << EOF
            docker network create --driver=bridge app-network || echo "Network 'app-network' already exists."
            if [ \$(docker ps -a -q -f name=it-asset-management-email_server) ]; then
              docker stop it-asset-management-email_server
              docker rm it-asset-management-email_server
            fi
            docker run -d --name it-asset-management-email_server --env-file ~/docker-setup/.env --network app-network ${{ secrets.DOCKER_USERNAME }}/it-asset-management-email:latest
          EOF
          rm private_key.pem
  redis:
    runs-on: ubuntu-latest
    environment: production
    needs: setup-ec2
    steps:
      - name: Deploy Redis to EC2
        run: |
          public_ip=${{ needs.setup-ec2.outputs.public_ip }}
          echo "${{ secrets.KEY_PAIR_SECRET }}" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$public_ip << EOF
            docker network create --driver=bridge app-network || echo "Network 'app-network' already exists."
            if [ ! \$(docker ps -a -q -f name=it-asset-management-redis) ]; then
              docker run -d --name it-asset-management-redis --network app-network redis:latest
            else
              echo "Redis container already exists. Skipping deployment."
            fi
          EOF
          rm private_key.pem
